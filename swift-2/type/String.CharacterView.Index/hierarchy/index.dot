strict digraph "String.CharacterView.Index - Type Hierarchy - SwiftDoc.org" {
    pad="0.1,0.8"
    node [shape=box, style="filled,rounded", color="#999999", fillcolor="#999999", fontcolor=white, fontname=Helvetica, fontnames="Helvetica,sansserif", fontsize=12, margin="0.07,0.05", height="0.3"]
    edge [color="#cccccc"]
    "BidirectionalIndexType" [URL="/protocol/BidirectionalIndexType/"]
    "Comparable" [URL="/protocol/Comparable/"]
    "Equatable" [URL="/protocol/Equatable/"]
    "ForwardIndexType" [URL="/protocol/ForwardIndexType/"]
    "Reflectable" [URL="/protocol/Reflectable/"]
    "String.CharacterView.Index" [URL="/type/String.CharacterView.Index/", style="filled", fillcolor="#ee543d", color="#ee543d"]
    "_Incrementable" [URL="/protocol/_Incrementable/"]    "ForwardIndexType" -> "String.CharacterView.Index"
    "_Incrementable" -> "String.CharacterView.Index"
    "Equatable" -> "String.CharacterView.Index"
    "BidirectionalIndexType" -> "String.CharacterView.Index"
    "Comparable" -> "String.CharacterView.Index"
    "Reflectable" -> "String.CharacterView.Index"
    "_Incrementable" -> "ForwardIndexType"
    "Equatable" -> "_Incrementable"
    "Equatable" -> "_Incrementable"
    "ForwardIndexType" -> "BidirectionalIndexType"
    "_Incrementable" -> "ForwardIndexType"
    "Equatable" -> "_Incrementable"
    "Equatable" -> "Comparable"
    subgraph Types {
        rank = max; "String.CharacterView.Index";
    }
}