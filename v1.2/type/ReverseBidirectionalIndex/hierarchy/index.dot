strict digraph "ReverseBidirectionalIndex<I : BidirectionalIndexType> - Type Hierarchy - SwiftDoc.org" {
    pad="0.1,0.8"
    node [shape=box, style="filled,rounded", color="#999999", fillcolor="#999999", fontcolor=white, fontname=Helvetica, fontnames="Helvetica,sansserif", fontsize=12, margin="0.07,0.05", height="0.3"]
    edge [color="#cccccc"]
    "BidirectionalIndexType" [URL="/protocol/BidirectionalIndexType/hierarchy/"]
    "Equatable" [URL="/protocol/Equatable/hierarchy/"]
    "ForwardIndexType" [URL="/protocol/ForwardIndexType/hierarchy/"]
    "ReverseBidirectionalIndex<I : BidirectionalIndexType>" [URL="/type/ReverseBidirectionalIndex/", style="filled", fillcolor="#ee543d", color="#ee543d"]
    "_BidirectionalIndexType" [URL="/protocol/_BidirectionalIndexType/hierarchy/"]
    "_ForwardIndexType" [URL="/protocol/_ForwardIndexType/hierarchy/"]
    "_Incrementable" [URL="/protocol/_Incrementable/hierarchy/"]    "BidirectionalIndexType" -> "ReverseBidirectionalIndex<I : BidirectionalIndexType>"
    "ForwardIndexType" -> "BidirectionalIndexType"
    "_BidirectionalIndexType" -> "BidirectionalIndexType"
    "_ForwardIndexType" -> "ForwardIndexType"
    "_Incrementable" -> "_ForwardIndexType"
    "Equatable" -> "_Incrementable"
    "_ForwardIndexType" -> "_BidirectionalIndexType"
    "_Incrementable" -> "_ForwardIndexType"
    "Equatable" -> "_Incrementable"
    subgraph Types {
        rank = max; "ReverseBidirectionalIndex<I : BidirectionalIndexType>";
    }
}